<?php

namespace App\Controller\Api\V1\Resource;

use App\Controller\Api\V1\ApiController;
use App\Controller\Api\V1\Crud\BaseGetItemsSetup;
use App\Controller\Api\V1\Crud\BaseGetItemSetup;
use App\Controller\Api\V1\Crud\BasePostItemSetup;
use App\Controller\Api\V1\Crud\BasePatchItemSetup;
use App\Controller\Api\V1\Crud\BaseDeleteItemSetup;
use {{ info.entityFQNC }};
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use OpenApi\Annotations as OA;

class {{ info.resourceSingularName }}Resource extends ApiController
{

    /**
     * @Route(path="{{ info.getItemsOperationUrl }}", methods={"GET"}, name="{{ info.getItemsOperationRouteName }}")
     *
     * @OA\Get(
     *     path="{{ info.getItemsOperationUrl }}",
     *     operationId="{{ info.getItemsOperationMethodName }}",
     *     @OA\Parameter(in="query", name="currentPage",  schema={"type"="integer", "example"=1}),
     *     @OA\Parameter(in="query", name="itemsPerPage", schema={"type"="integer", "example"=10}),
     *     @OA\Parameter(in="query", name="sortBy", schema={"type"="string", "default"="id"}),
     *     @OA\Parameter(in="query", name="sortOrder", schema={"type"="string", "default"="asc"}),
     *     @OA\Parameter(in="query", name="filter", schema={"type"="object" }, style="deepObject", explode=true),
     *     @OA\Response(
     *         response="200",
     *         description="{{ info.getItemsOperationResponseDescription }}",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                  type="object",
     *                  @OA\Property(property="status", type="string", enum={"ok", "error"}),
     *                  @OA\Property(property="result", type="array", items=@OA\Items(ref="#/components/schemas/{{ info.resourceSingularName }}List"))
     *             )
     *         )
     *     ),
     *     tags={"{{ info.resourceTag }}"}
     * )
     * @param Request $request
     *
     * @return JsonResponse
     */
    public function {{ info.getItemsOperationMethodName }}(Request $request)
    {
        return $this->handleGetItemsOperation($request, {{ info.entityShortName }}::class, new class extends BaseGetItemsSetup {

        });
    }

    /**
     * @Route(path="{{ info.getItemsOperationUrl }}/{id}", name="{{ info.getItemOperationRouteName }}", methods={"GET"})
     *
     * @OA\Get(
     *     path="{{ info.getItemsOperationUrl }}/{id}",
     *     operationId="{{ info.getItemOperationMethodName }}",
     *     @OA\Parameter(in="path", name="id", schema={"type"="integer"}, required=true),
     *     @OA\Response(
     *         response="200",
     *         description="{{ info.getItemOperationResponseDescription }}",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                  type="object",
     *                  @OA\Property(property="status", type="string", enum={"ok", "error"}),
     *                  @OA\Property(property="result", ref="#/components/schemas/{{ info.resourceSingularName }}Show")
     *             )
     *         )
     *     ),
     *     tags={"{{ info.resourceTag }}"}
     * )
     *
     * @param string $id
     * @return JsonResponse
     */
    public function {{ info.getItemOperationMethodName }}(string $id)
    {
        return $this->handleGetItemOperation($id, {{ info.entityShortName }}::class, new class extends BaseGetItemSetup {

        });
    }


    /**
     * @Route(path="{{ info.getItemsOperationUrl }}", name="{{ info.postItemOperationRouteName }}", methods={"POST"})
     *
     * @OA\Post(
     *     path="{{ info.getItemsOperationUrl }}",
     *     operationId="{{ info.postItemOperationMethodName }}",
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/{{ info.resourceSingularName }}Post")
     *         )
     *     ),
     *     @OA\Response(
     *         response="200",
     *         description="{{ info.postItemOperationResponseDescription }}",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                  type="object",
     *                  @OA\Property(property="status", type="string", enum={"ok", "error"}),
     *                  @OA\Property(property="result", ref="#/components/schemas/{{ info.resourceSingularName }}Show")
     *             )
     *         )
     *     ),
     *     tags={"{{ info.resourceTag }}"}
     * )
     *
     * @param Request $request
     *
     * @return JsonResponse
     */
    public function {{ info.postItemOperationMethodName }}(Request $request)
    {
        return $this->handlePostItemOperation($request, {{ info.entityShortName }}::class, new class extends BasePostItemSetup {

        });
    }

    /**
     * @Route(path="{{ info.getItemsOperationUrl }}/{id}", name="{{ info.patchItemOperationRouteName }}", methods={"PATCH"})
     *
     * @OA\Patch(
     *     path="{{ info.getItemsOperationUrl }}/{id}",
     *     operationId="{{ info.patchItemOperationMethodName }}",
     *     @OA\Parameter(in="path", name="id", schema={"type"="integer"}, required=true),
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(ref="#/components/schemas/{{ info.resourceSingularName }}Post")
     *         )
     *     ),
     *     @OA\Response(
     *         response="200",
     *         description="{{ info.patchItemOperationResponseDescription }}",
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                  type="object",
     *                  @OA\Property(property="status", type="string", enum={"ok", "error"}),
     *                  @OA\Property(property="result", ref="#/components/schemas/{{ info.resourceSingularName }}Show")
     *             )
     *         )
     *     ),
     *     tags={"{{ info.resourceTag }}"}
     * )
     *
     * @param string $id
     * @param Request $request
     * @return JsonResponse
     */
    public function {{ info.patchItemOperationMethodName }}(string $id, Request $request)
    {
        return $this->handlePatchItemOperation($id, $request, {{ info.entityShortName }}::class, new class extends BasePatchItemSetup {

        });
    }


    /**
    * @Route(path="{{ info.getItemsOperationUrl }}/{id}", name="{{ info.deleteItemOperationRouteName }}", methods={"DELETE"})
    *
    * @OA\Delete(
    *     path="{{ info.getItemsOperationUrl }}/{id}",
    *     operationId="{{ info.deleteItemOperationMethodName }}",
    *     @OA\Parameter(in="path", name="id", schema={"type"="integer"}, required=true),
    *     @OA\Response(
    *         response="200",
    *         description="{{ info.deleteItemOperationResponseDescription }}",
    *         @OA\MediaType(
    *             mediaType="application/json",
    *             @OA\Schema(
    *                  type="object",
    *                  @OA\Property(property="status", type="string", enum={"ok", "error"})
    *             )
    *         )
    *     ),
    *     tags={"{{ info.resourceTag }}"}
    * )
    *
    * @param string $id
    * @param Request $request
    * @return JsonResponse
    */
    public function {{ info.deleteItemOperationMethodName }}(string $id, Request $request)
    {
        return $this->handleDeleteItemOperation($id, {{ info.entityShortName }}::class, $request, new class extends BaseDeleteItemSetup {

        });
    }

}